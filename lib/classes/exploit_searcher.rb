class ExploitSearcher
  # def initialize() #root_dir ,file, description, date, author, platform, type, port)
  #   @search_string = {}
  #   @search_string[:file] = search_params[:file] if search_params.has_key? :file
  #   @search_string[:date] = search_params[:date] if search_params.has_key? :date
  #   @search_string[:author] = search_params[:author] if search_params.has_key? :author
  #   @search_string[:platform] = search_params[:platform] if search_params.has_key? :platform
  #   @search_string[:type] = search_params[:type] if search_params.has_key? :type
  #   @search_string[:port] = search_params[:port] if search_params.has_key? :port
  # end

  def select_exploits_from_file(exploit_file, search_params = {})
    @search_string = {}
    @search_string[:file] = search_params[:file] if search_params.has_key? :file
    @search_string[:date] = search_params[:date] if search_params.has_key? :date
    @search_string[:author] = search_params[:author] if search_params.has_key? :author
    @search_string[:platform] = search_params[:platform] if search_params.has_key? :platform
    @search_string[:type] = search_params[:type] if search_params.has_key? :type
    @search_string[:port] = search_params[:port] if search_params.has_key? :port

    exploit_array = []

    file = File.read(exploit_file)

    file.each_line do |line|
      # [id,file,description,date,author,platform,type,port]
      tmp_line_array = line.split(",")

      line_array = {}
      line_array[:id] = tmp_line_array[0]
      line_array[:file] = tmp_line_array[1]
      line_array[:description] = tmp_line_array[2]
      line_array[:date] = tmp_line_array[3]
      line_array[:author] = tmp_line_array[4]
      line_array[:platform] = tmp_line_array[5]
      line_array[:type] = tmp_line_array[6]
      line_array[:port] = tmp_line_array[7]

      # @search_string[:file] = 'remote'

      # Comparison
      line_match = 0

      # id,file,description,date,author,platform,type,port
      ### Search by filename ###
      if @search_string.has_key? :file
        line_match += 1 unless (/(#{@search_string[:file]})/.match(line_array[:file])).nil?
      end
      ### Search by descriptions ###
      if @search_string.has_key? :description
        line_match += 1 unless (/(#{@search_string[:description]})/.match(line_array[:description])).nil?
      end
      ### Search by date ###
      if @search_string.has_key? :date
        line_match += 1 unless (/(#{@search_string[:date]})/.match(line_array[:date])).nil?
      end
      ### Search by author ###
      if @search_string.has_key? :author
        line_match += 1 unless (/\A(#{@search_string[:author]})\z/.match(line_array[:author])).nil?
      end
      ### Search by platform ###
      if @search_string.has_key? :platform
        if @search_string[:platform].is_a? Array
          platform_match = false
          @search_string[:platform].each { | port_number |
            platform_match = true unless (/^(#{port_number})$/.match(line_array[:platform])).nil?
          }
          line_match += 1 if platform_match
        else
          line_match += 1 unless (/^(#{@search_string[:platform]})$/.match(line_array[:platform])).nil?
        end
      end
      ### Search by type ####
      if @search_string.has_key? :type
        line_match += 1 unless (/^(#{@search_string[:type]})$/.match(line_array[:type])).nil?
      end
      ### Search by port ###
      if @search_string.has_key? :port
        ## Check for array input ##
        if @search_string[:port].is_a? Array
          port_match = false
          @search_string[:port].each { | port_number |
            port_match = true unless (/^(#{port_number})$/.match(line_array[:port])).nil?
          }
          line_match += 1 if port_match
        else
          line_match += 1 unless (/^(#{@search_string[:port]})$/.match(line_array[:port])).nil?
        end
      end

      ### Place matching exploits into exploit array ###
      if line_match == @search_string.length
        exploit_array << line_array
      end
    end
    ## Return no matching exploits found message ##
    if exploit_array.empty?
      return 'No matching exploits found'
    ## Return matching exploits ##
    else
      return exploit_array
    end

  end

  def get_exploits_by_id

  end
end